---
layout: post
title:  "程序"
date:   2019-10-17 02:03:56 +0800
categories: Programing
---

> 参考
>
> [wikipedia - Programming paradigm](https://en.wikipedia.org/wiki/Programming_paradigm)

### 结构化编程

与**非结构化编程**对应。小程序具有较少的指令，因此它们更易于阅读，理解和修改。随着程序编的越来越复杂，为了避免编写单个大型程序，将大型程序划分为称为子程序或函数的较小部分。每个函数解决一个任务。这样可以轻松编写并确保其正常工作。一旦所有单独的功能都工作，则可以连接它们以创建单个大型程序。<br>
这带来了以下好处：<br>

1. 编写较小的函数快速，简单，易于阅读、理解、修改。
2. 多个程序员设计不同的函数，然后将各个函数组合在一起以创建一个大型程序。
3. 如果要修改一个大程序，只需要取出、重写或替换一个或多个函数。否则要浏览存储在大型程序中的所有指令，并尝试查找需要更改的指令
4. 如果编写了一个有用的函数，可以将该函数插入其他程序。通过创建经过测试的有用的函数库，可以通过重用现有代码，快速轻松地创建其他程序，从而减少从头开始编写所有内容。例如C/C++中使用```#include```

将大型程序划分为多个模块时，通常将每个函数存储在单独的文件中。这使得多个程序员可以处理不同的文件而不会影响其他任何人；也可以快速查找和修改程序的任何部分。

### 事件驱动编程

在计算机的早期阶段，大多数程序都是从第一条指令开始，然后逐行跟踪每条指令，直到结束。这些程序严格控制了计算机在任何给定时间的行为。

当计算机开始显示带有窗口和下拉菜单的图形用户界面时，所有这些都发生了变化。用户可以选择在任何给定时间执行的操作，每个程序都必须等待用户执行诸如选择菜单命令或单击按钮之类的操作，程序再对用户做出反应。

每次用户做某事时，都被认为是一个事件。如果用户单击鼠标左键，则与用户单击鼠标右键完全不同。程序现在必须响应用户所做的不同事件，而不是规定用户在任何给定时间可以做什么。使程序响应不同的事件，这称为事件驱动编程。

事件驱动程序将大型程序划分为多个功能，其中每个功能响应不同的事件。如果用户单击菜单命令，则函数将运行其指令。如果用户单击按钮，则另一个函数会运行另一组指令。

事件驱动编程总是等待响应用户的操作。

### 面向对象编程

* **存在问题**：

1. 将大型程序划分为多个函数可以轻松创建和修改程序。然而，因为没有简单的方法来确定哪些函数一起工作或者它们可能需要从其他函数获得什么数据，所以试图理解这样一个大型程序是如何工作的往往令人困惑。
2. 函数通常会修改其他函数使用的数据。这意味着有时函数会在另一个函数可以使用它之前修改数据。使用错误的数据将导致其他功能失败，从而导致整个程序失败。因此，这种情况不仅会创建不太可靠的软件，还难以确定解决问题的方式和位置。

* **解决方法**：

面向对象的编程。目标是将大型程序划分为较小的函数，但将相关的函数、变量组织在一起，称为对象。对象还模拟现实世界中的物理项目，使得程序更容易理解。除了隔离对象内的数据之外，面向对象编程背后的第二个想法是使重用和修改大型程序变得容易。

面向对象编程的关键是通过称为封装、继承、多态的三个特性来隔离程序的各个部分并提高可重用性。

* **三大特性：**

  * **封装**

    封装的主要目的是保护和隔离程序的一部分与程序的另一部分。 为此，封装会隐藏数据，因此程序的其他部分永远不会更改它。 此外，封装还包含操纵存储在该对象中的数据的所有函数。 如果出现任何问题，封装可以很容易地将问题隔离到特定对象中。

每个对象都意味着完全独立于程序的任何其他部分。 对象将数据存储在属性中。 操作这些属性的唯一方法是使用称为方法的函数，这些函数也封装在同一个对象中。 在对象中隔离的属性和方法的组合使得通过将对象用作构建块来快速可靠地创建大型程序变得容易，如图1-4所示。

#### 继承

创建一个庞大而复杂的程序很难，但是让这个任务更难的是从头开始编写整个程序。这就是为什么大多数程序员重用现有程序的一部分有两个原因。首先，他们不必从头开始重写他们需要的功能。这意味着他们可以更快地创建大型程序。其次，他们可以使用已经证明可以正常工作的经过测试的代码。这意味着他们可以通过重用可靠的代码来更快地创建更可靠的软件。
重用代码的一个巨大问题是您永远不想制作重复副本。假设您复制了一个函数并将其粘贴到第二个位置。现在，您有两个完全相同的代码副本存储在同一程序的两个不同位置。这浪费了空间，但更重要的是，它可能会在未来造成问题。
假设您在函数中发现了问题。要解决此问题，您需要在复制并将其粘贴到程序的其他部分的任何位置修复此代码。如果您将此代码复制并粘贴到程序中的其他两个位置，则必须在两个位置查找并修复该代码。如果您将此代码复制并粘贴到程序中的一千个位置，则必须在千个不同的位置查找并修复该代码。
这不仅不方便且耗时，而且还增加了忽略代码并在代码中留下问题的风险。这会产生不太可靠的程序。
为了避免修复相同代码的多个副本的问题，面向对象编程使用称为继承的东西。我们的想法是，一个对象可以使用存储在另一个对象中的所有代码，但无需实际制作该代码的副本。相反，一个对象从另一个对象继承代码，但只存在该代码的一个副本。
现在，您可以根据需要重复使用一个代码副本。如果您需要解决问题，则只需修复该代码一次，这些更改将自动出现在通过继承重用该代码的任何对象中。
基本上，继承允许您重用代码而无需实际制作该代码的重复副本。这样可以轻松地重用代码并在将来轻松修改代码。

#### 多态

每个对象都包含用于操作该数据的数据（存储在属性中）和函数（称为方法）。通过继承，一个对象可以使用另一个对象中定义的属性和方法。但是，当您需要一个函数（方法）来使用不同的代码时，继承可能会产生问题。
假设您创建了一个视频游戏。您将汽车定义为一个对象，将怪物定义为第二个对象。如果怪物在车上投掷石块，那么岩石就是第三个物体。要使汽车，怪物和岩石在屏幕上移动，您需要创建一个名为Move的方法。
不幸的是，汽车需要在屏幕上以不同于怪物或抛出的岩石的方式移动。您可以创建三个函数，并将它们命名为MoveCar，MoveMonster和MoveRock。但是，更简单的解决方案是仅为所有三个函数指定相同的名称，例如Move。
在传统编程中，您永远不能为两个或多个函数指定相同的名称，因为计算机不知道您要运行哪个函数。但是，在面向对象的编程中，由于多态性，您可以使用重复的函数名称。
多态性允许您使用相同的方法名称，但用不同的代码替换它。多态性起作用的原因是因为每个Move函数（方法）都存储在一个单独的对象中，例如一个表示汽车的对象，一个表示怪物的第二个对象，以及一个代表抛出的岩石的第三个对象。要运行每个Move函数，请标识包含要使用的Move函数的对象，例如
Car.Move
Monster.Move
Rock.Move
通过识别要操作的对象和要使用的函数，面向对象编程可以正确识别要运行的指令集，即使一个函数与另一个函数具有相同的名称。
从本质上讲，多态性允许您创建描述性函数名称，并在使用继承时随时重用该描述性名称。
封装，继承和多态的组合构成了面向对象编程的基础。封装将程序的一部分与另一部分隔离开来。继承允许您重用代码。多态性允许您重用方法名称但使用不同的代码。