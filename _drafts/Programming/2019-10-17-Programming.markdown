---
layout: post
title:  "编程"
date:   2019-10-17 02:03:56 +0800
categories: Computer Science

---

# 编程

## Git

[Git](https://git-scm.com/) 是一种分布式版本控制技术，参考 [Pro Git Book](https://git-scm.com/book/zh/v2) 学习 Git 的使用。

### 安装与配置

1. 根据操作系统
2. 查看所有配置情况：``

### Git 实例

1. 获取一个 git  repository 路径：

   1. 在本地建立：`mkdir MyGitProject` `cd .\MyGitProject\`  `git init`
   2. 从别处 clone：

2. 设置路径内文件过滤规则：在 `MyGitProject` 路径内建立 `.gitignore` ，打开编辑：

   1. 过滤某个文件、某个文件类型、某个文件夹

      ```
      *.rar
      
      ```

   2. 只追踪某个文件、某个文件类型、某个文件夹

      ```
      
      ```


## 程序流程

### 顺序

编程就是编写计算机能执行的命令。显然，由一行组成的程序将无法做很多事情，因此程序由多行指令（或代码）组成，计算机将逐行顺序地运行这些指令。

```Swift
print("Hello, world!")
print("Now the program is done.")
```

### 循环

如果多次执行相同的指令，但只编写一次指令，这称为循环。编程语言通常提供了```for - in```循环、```while```循环、```do-while```循环等。

```Swift
for i in 1...1000 {
  print("Hello, world!")
}
```

### 分支

制定决策可以使计算机变得灵活而强大，评估某些条件，然后根据该条件决定下一步该做什么，这称为分支。编程语言通常提供了```if - else```分支、```switch - case```分支等。

```Swift
if password == "secret" {
    print("Access granted!")
} else {
    print("Login denied!")
}
```

## 编程范型

参考链接

* 

### 结构化编程

与**非结构化编程**对应。小程序具有较少的指令，因此它们更易于阅读，理解和修改。随着程序编的越来越复杂，为了避免编写单个大型程序，将大型程序划分为称为子程序或函数的较小部分。每个函数解决一个任务。这样可以轻松编写并确保其正常工作。一旦所有单独的功能都工作，则可以连接它们以创建单个大型程序。<br>
这带来了以下好处：<br>

1. 编写较小的函数快速，简单，易于阅读、理解、修改。
2. 多个程序员设计不同的函数，然后将各个函数组合在一起以创建一个大型程序。
3. 如果要修改一个大程序，只需要取出、重写或替换一个或多个函数。否则要浏览存储在大型程序中的所有指令，并尝试查找需要更改的指令
4. 如果编写了一个有用的函数，可以将该函数插入其他程序。通过创建经过测试的有用的函数库，可以通过重用现有代码，快速轻松地创建其他程序，从而减少从头开始编写所有内容。例如C/C++中使用```#include```

将大型程序划分为多个模块时，通常将每个函数存储在单独的文件中。这使得多个程序员可以处理不同的文件而不会影响其他任何人；也可以快速查找和修改程序的任何部分。

### 事件驱动编程

在计算机的早期阶段，大多数程序都是从第一条指令开始，然后逐行跟踪每条指令，直到结束。这些程序严格控制了计算机在任何给定时间的行为。

当计算机开始显示带有窗口和下拉菜单的图形用户界面时，所有这些都发生了变化。用户可以选择在任何给定时间执行的操作，每个程序都必须等待用户执行诸如选择菜单命令或单击按钮之类的操作，程序再对用户做出反应。

每次用户做某事时，都被认为是一个事件。如果用户单击鼠标左键，则与用户单击鼠标右键完全不同。程序现在必须响应用户所做的不同事件，而不是规定用户在任何给定时间可以做什么。使程序响应不同的事件，这称为事件驱动编程。

事件驱动程序将大型程序划分为多个功能，其中每个功能响应不同的事件。如果用户单击菜单命令，则函数将运行其指令。如果用户单击按钮，则另一个函数会运行另一组指令。

事件驱动编程总是等待响应用户的操作。

### 面向对象编程

* **存在问题**：

1. 将大型程序划分为多个函数可以轻松创建和修改程序。然而，因为没有简单的方法来确定哪些函数一起工作或者它们可能需要从其他函数获得什么数据，所以试图理解这样一个大型程序是如何工作的往往令人困惑。
2. 函数通常会修改其他函数使用的数据。这意味着有时函数会在另一个函数可以使用它之前修改数据。使用错误的数据将导致其他功能失败，从而导致整个程序失败。因此，这种情况不仅会创建不太可靠的软件，还难以确定解决问题的方式和位置。

* **解决方法**：

面向对象的编程。目标是将大型程序划分为较小的函数，但将相关的函数、变量组织在一起，称为对象。对象还模拟现实世界中的物理项目，使得程序更容易理解。除了隔离对象内的数据之外，面向对象编程背后的第二个想法是使重用和修改大型程序变得容易。

面向对象编程的关键是通过称为封装、继承、多态的三个特性来隔离程序的各个部分并提高可重用性。

* **三大特性：**

  * **封装**

    封装的主要目的是保护和隔离程序的一部分与程序的另一部分。 为此，封装会隐藏数据，因此程序的其他部分永远不会更改它。 此外，封装还包含操纵存储在该对象中的数据的所有函数。 如果出现任何问题，封装可以很容易地将问题隔离到特定对象中。

每个对象都意味着完全独立于程序的任何其他部分。 对象将数据存储在属性中。 操作这些属性的唯一方法是使用称为方法的函数，这些函数也封装在同一个对象中。 在对象中隔离的属性和方法的组合使得通过将对象用作构建块来快速可靠地创建大型程序变得容易，如图1-4所示。

#### 继承

创建一个庞大而复杂的程序很难，但是让这个任务更难的是从头开始编写整个程序。这就是为什么大多数程序员重用现有程序的一部分有两个原因。首先，他们不必从头开始重写他们需要的功能。这意味着他们可以更快地创建大型程序。其次，他们可以使用已经证明可以正常工作的经过测试的代码。这意味着他们可以通过重用可靠的代码来更快地创建更可靠的软件。
重用代码的一个巨大问题是您永远不想制作重复副本。假设您复制了一个函数并将其粘贴到第二个位置。现在，您有两个完全相同的代码副本存储在同一程序的两个不同位置。这浪费了空间，但更重要的是，它可能会在未来造成问题。
假设您在函数中发现了问题。要解决此问题，您需要在复制并将其粘贴到程序的其他部分的任何位置修复此代码。如果您将此代码复制并粘贴到程序中的其他两个位置，则必须在两个位置查找并修复该代码。如果您将此代码复制并粘贴到程序中的一千个位置，则必须在千个不同的位置查找并修复该代码。
这不仅不方便且耗时，而且还增加了忽略代码并在代码中留下问题的风险。这会产生不太可靠的程序。
为了避免修复相同代码的多个副本的问题，面向对象编程使用称为继承的东西。我们的想法是，一个对象可以使用存储在另一个对象中的所有代码，但无需实际制作该代码的副本。相反，一个对象从另一个对象继承代码，但只存在该代码的一个副本。
现在，您可以根据需要重复使用一个代码副本。如果您需要解决问题，则只需修复该代码一次，这些更改将自动出现在通过继承重用该代码的任何对象中。
基本上，继承允许您重用代码而无需实际制作该代码的重复副本。这样可以轻松地重用代码并在将来轻松修改代码。

#### 多态

每个对象都包含用于操作该数据的数据（存储在属性中）和函数（称为方法）。通过继承，一个对象可以使用另一个对象中定义的属性和方法。但是，当您需要一个函数（方法）来使用不同的代码时，继承可能会产生问题。
假设您创建了一个视频游戏。您将汽车定义为一个对象，将怪物定义为第二个对象。如果怪物在车上投掷石块，那么岩石就是第三个物体。要使汽车，怪物和岩石在屏幕上移动，您需要创建一个名为Move的方法。
不幸的是，汽车需要在屏幕上以不同于怪物或抛出的岩石的方式移动。您可以创建三个函数，并将它们命名为MoveCar，MoveMonster和MoveRock。但是，更简单的解决方案是仅为所有三个函数指定相同的名称，例如Move。
在传统编程中，您永远不能为两个或多个函数指定相同的名称，因为计算机不知道您要运行哪个函数。但是，在面向对象的编程中，由于多态性，您可以使用重复的函数名称。
多态性允许您使用相同的方法名称，但用不同的代码替换它。多态性起作用的原因是因为每个Move函数（方法）都存储在一个单独的对象中，例如一个表示汽车的对象，一个表示怪物的第二个对象，以及一个代表抛出的岩石的第三个对象。要运行每个Move函数，请标识包含要使用的Move函数的对象，例如
Car.Move
Monster.Move
Rock.Move
通过识别要操作的对象和要使用的函数，面向对象编程可以正确识别要运行的指令集，即使一个函数与另一个函数具有相同的名称。
从本质上讲，多态性允许您创建描述性函数名称，并在使用继承时随时重用该描述性名称。
封装，继承和多态的组合构成了面向对象编程的基础。封装将程序的一部分与另一部分隔离开来。继承允许您重用代码。多态性允许您重用方法名称但使用不同的代码。

## 设计模式

# 📌理解编程语言

编程语言只不过是一种表达思想的特定方式，就像西班牙语，阿拉伯语，中文或英语等人类语言一样。计算机科学家创建编程语言来解决特定类型的问题。这意味着一种编程语言可能非常适合解决一种类型的问题，但却很难解决不同类型的问题。

最流行的编程语言是C，它是为低级访问计算机硬件而设计的。因此，C语言非常适合创建操作系统，防病毒程序和硬盘加密程序。任何需要完全控制硬件的东西都是C编程语言的完美任务。

不幸的是，C可能是神秘而稀疏的，因为它的设计旨在最大限度地提高计算机的效率而不考虑人的效率用于读取，编写或修改C程序。为了改进C，计算机科学家创建了一个面向对象的C语言，称为C ++。很快就出现了一个更精致的C ++版本，名为Objective-C，它是Apple为macOS和iOS编程所采用的语言。

因为C最初是以牺牲人类效率为代价而设计用于计算机效率的，所以C的所有变体（包括C ++和Objective-C）也可能难以学习，使用和理解。这就是Apple创造Swift的原因。 Swift的目的是为您提供Objective-C的强大功能，同时更容易学习，使用和理解。 Swift基本上是Objective-C的改进版本，它本身是C ++的改进版本，它是C的改进版本。

计算机编程的每次演变都建立在先前的编程标准之上。当您在Swift中编写程序时，您可以使用Swift的独特功能以及面向对象的编程，事件驱动编程，结构化编程以及编程的三个基本构建块（顺序，循环和分支）。
与所有计算机编程语言一样，Swift包含一个固定的命令列表，称为关键字。要告诉计算机要执行的操作，可以使用关键字创建使计算机执行单个任务的语句。

您已经看过print关键字打印文本，例如print（“Hello，world！”）
这个Swift关键字是print（代表print）;然后你必须告诉关键字你想打印什么，括在括号中。正如学习人类语言需要首先学习用于书写字母或其他符号等字母的基本符号一样，学习编程语言也需要首先学习该特定编程语言的关键词。
虽然Swift包含许多关键字，但您不必一次学习所有这些关键字来编写Swift中的程序。您最初必须学习一些关键字。随着您越来越有经验，您将逐渐需要学习其他Swift关键字。
为了使编程尽可能简单，Swift（与许多编程语言一样）使用看起来像普通英语单词的关键字，如print或var（变量的缩写）。但是，许多编程语言也使用代表不同特征的符号。
公共符号是用于加法（+），减法（ - ），乘法（*）和除法（/）的数学符号。
为了识别一起工作的命令的开头和结尾，Swift（如C）使用大括号括起代码，如
{
    print（“这是一条消息”）;
}
与人类语言不同的是，你可以拼错一个单词或者忘记用一段时间来结束一个句子而人们仍然可以理解你所说的内容，编程语言并不那么宽容。使用编程语言，每个关键字必须拼写正确，并且必须在需要的地方使用每个符号。拼错一个关键字，使用错误的符号，或将正确的符号放在错误的位置，整个程序将无法正常工作。
编程语言是精确的。编程的关键是写
尽可能少的代码
尽可能做的代码
尽可能易于理解的代码。
您希望编写尽可能少的代码，因为您编写的代码越少，就越容易确保它正常工作。
您希望代码尽可能多地执行，因为这会使您的程序更有能力解决更大的问题。
您希望代码易于理解，因为这样可以轻松修复问题并添加功能。
不幸的是，这三个标准通常彼此不一致，如图1-5所示。如果你编写尽可能少的代码，这通常意味着你的代码不能做太多。这就是为什么程序员经常使用快捷方式和编程技巧来缩小代码的大小，但这会增加代码的复杂性，使其更难理解。如果编写尽可能多的代码，这通常意味着编写大量命令，这使得代码更难理解。
如果你编写易于理解的代码，它通常不会做太多。如果你写

# 📌Cocoa 框架

使用关键字（和符号）可以向计算机发出指令，但是没有编程语言可以提供创建所有类型程序所需的所有可能命令。
为了提供附加命令，程序员使用关键字来创建执行特定任务的函数。当他们创建有用的功能时，他们经常将其保存在其他有用功能的库中。编写程序时，可以使用编程语言的关键字以及存储在库中的任何函数。通过重用存储在库中的函数，您可以创建更强大，更可靠的代码。
例如，一个库可能包含用于显示图形的功能。另一个库可能包含将数据保存到磁盘并再次检索它的功能。另一个库可能包含用于计算数学公式的函数。为了简化macOS和iOS程序的编写，Apple创建了一个名为Cocoa框架的有用函数库框架。
重用现有框架有两个原因。首先，重用
框架使您不必编写自己的指令来完成其他人已经解决的任务。框架不仅提供了现成的解决方案，而且框架也经过了其他人的测试，因此您可以使用框架并确保它能够正常工作。
使用现有框架的第二个原因是为了保持一致性。 Apple提供了用于在屏幕上定义程序外观的框架，称为用户界面。这定义了程序在屏幕上显示窗口的行为方式，以及通过单击鼠标来调整窗口大小或关闭窗口。
编写自己的指令以在屏幕上显示窗口是完全可能的，但编写自己的指令可能需要一些时间来创建和测试，最终结果将是一个用户界面，其外观可能与其他界面不同或行为相同。 macOS或iOS程序。
但是，通过重用现有框架，您可以快速创建自己的程序，并确保程序的行为与其他程序的行为相同。尽管编程可能听起来很复杂，但Apple提供了数百种预先编写和测试过的功能，可帮助您快速轻松地创建程序。您所要做的就是编写自定义指令，使您的程序解决特定的，独特的问题。
要了解Apple的Cocoa框架是如何工作的，您需要理解面向对象的编程有两个原因。首先，Swift是一种面向对象的编程语言，因此要充分利用Swift，您需要了解面向对象编程的优势。
其次，Apple的Cocoa框架基于面向对象的编程。要了解如何使用Cocoa框架，您需要使用对象。

注意Cocoa框架旨在创建macOS程序。
一个名为Cocoa Touch的类似框架专为创建iOS应用而设计。因为Cocoa Touch框架（iOS）基于Cocoa框架（macOS），所以它们的工作方式类似，但提供不同的功能。

通过依赖Cocoa框架，每次Apple更新和改进Cocoa框架时，您的程序都可以获得新功能。例如，拼写检查是Cocoa框架的内置功能。如果你写
使用Cocoa框架的程序，您的程序自动获得拼写检查功能，而无需编写任何其他代码。当Apple改进Cocoa框架中的拼写检查功能时，您的程序会自动获得这些改进，而您无需付出额外的努力。
Cocoa框架是一个通用术语，描述了Apple所有预先编写和测试过的代码库。 Cocoa框架的一些不同部分可以为您的程序提供音频播放功能，图形功能，联系信息存储功能（如名称和地址）以及Internet功能。 Cocoa框架创建了典型macOS程序的基础。您所要做的就是编写Swift代码，使您的程序独一无二。

# 📌MVC设计模式

编写一个大型程序并将所有代码存储在一个文件中是可行的。但是，这使得在程序中查找任何内容变得更加困难。更好的解决方案是将大型程序划分为多个部分，并将相关部分存储在单独的文件中。通过这种方式，可以快速找到需要修改的程序部分。将程序划分为单独的文件时，最好保持井井有条，以便每个文件只包含相关数据。这样，可以快速轻松地找到需要修改的文件，并使多个程序员可以轻松地协同工作

将存储在文件中的数据类型通常分为三类：
1. 视图（View）
2. 模型（Model）
3. 控制器（Controller）

视图或用户界面是用户看到的内容。每个用户界面的目的是显示信息，接受数据并接受来自用户的命令。过去，通常编写代码来创建用户界面。现在，Xcode 提供了 Interface Builder 用于可视化设计用户交互界面，在storyboard设计界面内，拖动各种控件，如列表、按钮、文本框等到视图内部，并通过“segue”连接视图以实现视图的跳转。这极大地提升了开发效率，减少了编写错误。当使用 Xcode 创建用户界面时，实际上正在使用 Apple 的 Cocoa 或 Cocoa Touch 框架来执行此操作。

仅用户界面什么都不做不了。要使程序执行一些有用的操作，需要编写解决特定问题的代码。例如分析数据、执行算法、游戏规则等，这部分代码称为模型。模型实际上与视图（用户界面）完全分离，这使得在不影响模型的情况下轻松修改用户界面（反之亦然）。通过使程序的不同部分尽可能与程序的其他部分隔离，可以减少修改程序时发生错误的可能性。

由于模型始终与视图完全分离，因此需要一个控制器。当用户选择命令或在用户界面中键入数据时，控制器从视图中获取该信息并将其传递给模型。模型响应此数据或命令并计算新结果。然后它将计算结果发送给控制器，控制器将其传递回视图以显示供用户查看。所以在任何时候，视图和模型都是完全独立的，控制器负责连接它们。

使用Xcode，这意味着您可以在定义程序模型的文件中编写和存储大量Swift代码。如果您正在计算中奖号码，则执行这些计算的Swift代码将存储在模型中。
您还需要在控制器文件中编写和存储Swift代码。在一个简单的程序中，您可能只有一个视图。在更复杂的程序中，您可能有多个视图。对于每个视图，通常需要一个控制器文件来控制该视图。因此，您编写和存储Swift代码的第二个位置是控制器文件。
在简单程序中，将模型与控制器组合在一个文件中是很常见的。但是对于更大，更复杂的程序，最好为模型创建一个（或多个）文件，为每个控制器创建一个文件。控制器文件的数量通常等于构成用户界面的视图数。

一旦将程序清楚地分离为模型，视图和控制器，就可以通过用新文件替换一个文件，轻松快速地修改程序。例如，如果要修改用户界面，只需设计一个不同的视图，将其连接到控制器，就可以完成，而无需涉及模型文件。如果要修改模型以添加新功能，只需更新模型文件并将其连接到控制器，而无需涉及视图。实际上，这正是为 macOS 和 iOS 设计程序的方式。模型保持不变，分别编写 iOS 和 macOS 的控制器，就可以使用完全相同的模型创建 macOS 和 iOS 应用程序。

# 📌中英文对照表
中文 | English
------------ | -------------
顺序地 | sequentially
循环 | loop
分支 | branching
结构化编程 | structured programming
事件驱动编程 | event-driven programming
面向对象编程 | object-oriented programming
封装 | encapsulation
抽象 | abstraction
继承 | inheritance
多态 | polymorphism